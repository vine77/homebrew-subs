#!/usr/bin/env bash

set -euo pipefail

DEFAULT_MODEL="gpt-4o-mini"
DEFAULT_TEMP=0.7

print_usage() {
  cat << EOF
Usage: subs <command> [options] <URL>

Commands:
  dl         Download and extract subtitles from a video
  clean      Clean up subtitles using OpenAI
  condense   Create a condensed version of subtitles using OpenAI
  summarize  Extract key points and insights from subtitles using OpenAI

Options:
  -h, --help            Show this help message
  -m, --model MODEL     Specify OpenAI model (default: gpt-4o-mini)

Examples:
  subs dl "https://www.youtube.com/live/DQacCB9tDaw"
  subs clean "https://www.youtube.com/live/DQacCB9tDaw"
  subs clean --model gpt-4o "https://www.youtube.com/live/DQacCB9tDaw"
  subs condense "https://www.youtube.com/live/DQacCB9tDaw"
  subs summarize "https://www.youtube.com/live/DQacCB9tDaw"
EOF
}

subs_dl() {
  local url="$1"
  if [ -z "$url" ]; then
    echo "Error: URL is required"
    echo "Usage: subs dl <URL>"
    exit 1
  fi

  # First try to get manual subtitles only
  yt-dlp --quiet --no-warnings --skip-download --write-subs --sub-lang "en.*" "$url" || true

  # Check if we got any English subtitles
  if ! ls *.en*.vtt >/dev/null 2>&1; then
    # If no manual subtitles found, try auto-generated ones
    yt-dlp --quiet --no-warnings --skip-download --write-subs --write-auto-subs --sub-lang "en.*" "$url" || true

    if ! ls *.en*.vtt >/dev/null 2>&1; then
      echo "Error: No subtitles found."
      exit 1
    fi
  fi

  # Process the first available subtitle file
  local vtt_file
  vtt_file=$(ls -1 *.en*.vtt 2>/dev/null | head -n 1)

  sed -E "/-->|WEBVTT|^Kind:|^Language:|^[[:space:]]*$/d; s/<[^>]*>//g; s/^[[:space:]]+//; s/[[:space:]]+$//" "$vtt_file" \
    | awk '!seen[$0]++' \
    | tr "\n" " " \
    && rm -f *.vtt || { echo "Error: Failed to process subtitles."; exit 1; }
}

subs_clean() {
  local model="$DEFAULT_MODEL"
  local url=""

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -m|--model)
        if [ -z "${2:-}" ]; then
          echo "Error: --model requires a value"
          exit 1
        fi
        model="$2"
        shift 2
        ;;
      *)
        if [ -z "$url" ]; then
          url="$1"
        else
          echo "Error: Unexpected argument: $1"
          exit 1
        fi
        shift
        ;;
    esac
  done

  if [ -z "$url" ]; then
    echo "Error: URL is required"
    echo "Usage: subs clean [--model MODEL] <URL>"
    exit 1
  fi

  if [ -z "${OPENAI_API_KEY:-}" ]; then
    echo "Error: OPENAI_API_KEY is not set. Please export your API key."
    exit 1
  fi

  transcript=$(subs_dl "$url")
  if [ -z "$transcript" ]; then
    echo "Error: Could not extract subtitles or no subtitles available."
    exit 1
  fi

  escaped_transcript=$(jq -R -s '.' <<< "$transcript")

  output=$(curl -s "https://api.openai.com/v1/chat/completions" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -d "{
      \"model\": \"$model\",
      \"temperature\": $DEFAULT_TEMP,
      \"messages\": [
        {
          \"role\": \"system\",
          \"content\": \"You are an expert copywriter that will be given captions from a video. Assume what you are provided is the video's entire transcript. Carefully punctuate (without using exclamation points), add paragraph breaks, and fix the transcription. You can remove extraneous captions like applause/music/etc., but do not change the original tone or phrasing. Do not summarize, truncate, or annotate. Simply output the entire revised transcript verbatim.\"
        },
        {
          \"role\": \"user\",
          \"content\": $escaped_transcript
        }
      ]
    }" | jq -r '.choices[0].message.content')

  if [ -n "$output" ]; then
    echo "$output"
  else
    echo "Error: OpenAI API failed to process the transcript."
    exit 1
  fi
}

subs_condense() {
  local model="$DEFAULT_MODEL"
  local url=""

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -m|--model)
        if [ -z "${2:-}" ]; then
          echo "Error: --model requires a value"
          exit 1
        fi
        model="$2"
        shift 2
        ;;
      *)
        if [ -z "$url" ]; then
          url="$1"
        else
          echo "Error: Unexpected argument: $1"
          exit 1
        fi
        shift
        ;;
    esac
  done

  if [ -z "$url" ]; then
    echo "Error: URL is required"
    echo "Usage: subs condense [--model MODEL] <URL>"
    exit 1
  fi

  if [ -z "${OPENAI_API_KEY:-}" ]; then
    echo "Error: OPENAI_API_KEY is not set. Please export your API key."
    exit 1
  fi

  transcript=$(subs_dl "$url")
  if [ -z "$transcript" ]; then
    echo "Error: Could not extract subtitles or no subtitles available."
    exit 1
  fi

  escaped_transcript=$(jq -R -s '.' <<< "$transcript")

  output=$(curl -s "https://api.openai.com/v1/chat/completions" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -d "{
      \"model\": \"$model\",
      \"temperature\": $DEFAULT_TEMP,
      \"messages\": [
        {
          \"role\": \"system\",
          \"content\": \"You are an expert copywriter that will be given captions from a video. Assume what you are provided is the video's entire transcript. Condense the transcript while maintaining the original author's voice, intent, structure, narrative arc, and as much of the original content as possible. The summary should preserve the original flow and tone, creating a shorter but faithful version of the transcript. You can remove extraneous captions like applause/music/etc., but do not add any of your own narrations. Your output should feel like a condensed representation of the original.\"
        },
        {
          \"role\": \"user\",
          \"content\": $escaped_transcript
        }
      ]
    }" | jq -r '.choices[0].message.content')

  if [ -n "$output" ]; then
    echo "$output"
  else
    echo "Error: OpenAI API failed to process the transcript."
    exit 1
  fi
}

subs_summarize() {
  local model="$DEFAULT_MODEL"
  local url=""

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -m|--model)
        if [ -z "${2:-}" ]; then
          echo "Error: --model requires a value"
          exit 1
        fi
        model="$2"
        shift 2
        ;;
      *)
        if [ -z "$url" ]; then
          url="$1"
        else
          echo "Error: Unexpected argument: $1"
          exit 1
        fi
        shift
        ;;
    esac
  done

  if [ -z "$url" ]; then
    echo "Error: URL is required"
    echo "Usage: subs summarize [--model MODEL] <URL>"
    exit 1
  fi

  if [ -z "${OPENAI_API_KEY:-}" ]; then
    echo "Error: OPENAI_API_KEY is not set. Please export your API key."
    exit 1
  fi

  transcript=$(subs_dl "$url")
  if [ -z "$transcript" ]; then
    echo "Error: Could not extract subtitles or no subtitles available."
    exit 1
  fi

  escaped_transcript=$(jq -R -s '.' <<< "$transcript")

  output=$(curl -s "https://api.openai.com/v1/chat/completions" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -d "{
      \"model\": \"$model\",
      \"temperature\": $DEFAULT_TEMP,
      \"messages\": [
        {
          \"role\": \"system\",
          \"content\": \"You are an expert copywriter that will be given captions from a video. Summarize the transcript by presenting the key points and insights, while maintaining the flow, tone, intent, detail, and voice of the original author, presented from their point of view. Make it brief by focusing on the most valuable information while staying faithful to the original. Output in paragraph form.\"
        },
        {
          \"role\": \"user\",
          \"content\": $escaped_transcript
        }
      ]
    }" | jq -r '.choices[0].message.content')

  if [ -n "$output" ]; then
    echo "$output"
  else
    echo "Error: OpenAI API failed to process the transcript."
    exit 1
  fi
}

if [ $# -eq 0 ]; then
  print_usage
  exit 1
fi

if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
  print_usage
  exit 0
fi

case "$1" in
  dl)
    shift
    subs_dl "${1:-}"
    ;;
  clean)
    shift
    subs_clean "$@"
    ;;
  condense)
    shift
    subs_condense "$@"
    ;;
  summarize)
    shift
    subs_summarize "$@"
    ;;
  *)
    echo "Error: Unknown command: $1"
    print_usage
    exit 1
    ;;
esac
